{"version":3,"file":"cookie.service.d.ts","sources":["cookie.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { InjectionToken } from '@angular/core';\nexport declare class CookieService {\n    private document;\n    private platformId;\n    private readonly documentIsAccessible;\n    constructor(document: any, platformId: InjectionToken<Object>);\n    /**\n     * @param name Cookie name\n     * @returns {boolean}\n     */\n    check(name: string): boolean;\n    /**\n     * @param name Cookie name\n     * @returns {any}\n     */\n    get(name: string): string;\n    /**\n     * @returns {}\n     */\n    getAll(): {};\n    /**\n     * @param name     Cookie name\n     * @param value    Cookie value\n     * @param expires  Number of days until the cookies expires or an actual `Date`\n     * @param path     Cookie path\n     * @param domain   Cookie domain\n     * @param secure   Secure flag\n     * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `None`\n     */\n    set(name: string, value: string, expires?: number | Date, path?: string, domain?: string, secure?: boolean, sameSite?: 'Lax' | 'None' | 'Strict'): void;\n    /**\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    delete(name: string, path?: string, domain?: string): void;\n    /**\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     */\n    deleteAll(path?: string, domain?: string): void;\n    /**\n     * @param name Cookie name\n     * @returns {RegExp}\n     */\n    private getCookieRegExp(name);\n}\n"]}